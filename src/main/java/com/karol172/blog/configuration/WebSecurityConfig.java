package com.karol172.blog.configuration;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.authentication.configurers.userdetails.DaoAuthenticationConfigurer;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer;import org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer;import org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.AuthorizedUrl;import org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.ExpressionInterceptUrlRegistry;import org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer;import org.springframework.security.config.annotation.web.configurers.LogoutConfigurer;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.access.AccessDeniedHandler;import org.springframework.security.web.util.matcher.AntPathRequestMatcher;@Configuration@EnableWebSecuritypublic class WebSecurityConfig        extends WebSecurityConfigurerAdapter{    @Autowired    @Qualifier("userDetailsService")    private UserDetailsService userDetailsService;    @Autowired    @Qualifier("passwordEncoder")    private PasswordEncoder passwordEncoder;    @Autowired    private AccessDeniedHandler accessDeniedHandler;    @Autowired    public void configureGlobal(AuthenticationManagerBuilder auth)            throws Exception    {        auth.userDetailsService(this.userDetailsService).passwordEncoder(this.passwordEncoder);    }    protected void configure(HttpSecurity http)            throws Exception    {        ((HttpSecurity)((HttpSecurity)((HttpSecurity)((ExpressionUrlAuthorizationConfigurer.AuthorizedUrl)((ExpressionUrlAuthorizationConfigurer.AuthorizedUrl)((ExpressionUrlAuthorizationConfigurer.AuthorizedUrl)((ExpressionUrlAuthorizationConfigurer.AuthorizedUrl)((ExpressionUrlAuthorizationConfigurer.AuthorizedUrl)((ExpressionUrlAuthorizationConfigurer.AuthorizedUrl)((ExpressionUrlAuthorizationConfigurer.AuthorizedUrl)((ExpressionUrlAuthorizationConfigurer.AuthorizedUrl)((ExpressionUrlAuthorizationConfigurer.AuthorizedUrl)((ExpressionUrlAuthorizationConfigurer.AuthorizedUrl)((ExpressionUrlAuthorizationConfigurer.AuthorizedUrl)((ExpressionUrlAuthorizationConfigurer.AuthorizedUrl)http.authorizeRequests().antMatchers(new String[] { "/css/**", "/webjars/**" })).permitAll().antMatchers(new String[] { "/", "/pages/**", "/article/**" })).permitAll().antMatchers(new String[] { "/registration/**", "/login", "/forgotten/**" })).anonymous().antMatchers(new String[] { "/user/**" })).authenticated().antMatchers(new String[] { "/admin/articles/**" })).hasAuthority("articles").antMatchers(new String[] { "/admin/categories/**" })).hasAuthority("categories").antMatchers(new String[] { "/admin/files/**" })).hasAuthority("files").antMatchers(new String[] { "/admin/comments/**" })).hasAuthority("comments").antMatchers(new String[] { "/admin/usergroups/**" })).hasAuthority("usergroups").antMatchers(new String[] { "/admin/users/**" })).hasAuthority("users").antMatchers(new String[] { "/admin/settings/**" })).hasAuthority("settings").anyRequest()).authenticated().and()).formLogin().loginPage("/login").and()).logout().logoutRequestMatcher(new AntPathRequestMatcher("/logout")).and()).exceptionHandling().accessDeniedHandler(this.accessDeniedHandler);    }}