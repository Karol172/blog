package com.karol172.blog.configuration;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.access.AccessDeniedHandler;import org.springframework.security.web.util.matcher.AntPathRequestMatcher;@Configuration@EnableWebSecuritypublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    @Qualifier("userDetailsService")    private UserDetailsService userDetailsService;    @Autowired    @Qualifier("passwordEncoder")    private PasswordEncoder passwordEncoder;    @Autowired    private AccessDeniedHandler accessDeniedHandler;    @Autowired    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {        auth.userDetailsService(this.userDetailsService).passwordEncoder(this.passwordEncoder);    }    protected void configure(HttpSecurity http) throws Exception {        http.authorizeRequests()                .antMatchers("/css/**", "/webjars/**").permitAll()                .antMatchers("/", "/pages/**", "/article/**").permitAll()                .antMatchers("/registration/**", "/login", "/forgotten/**").anonymous()                .antMatchers("/user/**").authenticated()                .antMatchers("/admin/articles/**").hasAuthority("Artykuły")                .antMatchers("/admin/categories/**").hasAuthority("Kategorie")                .antMatchers("/admin/files/**").hasAuthority("Pliki")                .antMatchers("/admin/comments/**").hasAuthority("Komentarze")                .antMatchers("/admin/usergroups/**").hasAuthority("Grupy Użytkowników")                .antMatchers("/admin/users/**").hasAuthority("Użytkownicy")                .antMatchers("/admin/settings/**").hasAuthority("Ustawienia")                .anyRequest().authenticated()                .and().formLogin().loginPage("/login")                .and().logout().logoutRequestMatcher(new AntPathRequestMatcher("/logout"))                .and().exceptionHandling()                .accessDeniedHandler(this.accessDeniedHandler);    }}